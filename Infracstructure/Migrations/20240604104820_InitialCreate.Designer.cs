// <auto-generated />
using System;
using Infracstructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(datnContext))]
    [Migration("20240604104820_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Casestudy", b =>
                {
                    b.Property<int>("CaseStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("CaseStudyId");

                    b.Property<string>("Conclusion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("conclusion")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("createDate")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Diagnostic")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("diagnostic")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Patientld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("patientld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Reason")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Report")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("report")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("ReportCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("reportCount")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("CaseStudyId")
                        .HasName("PRIMARY");

                    b.HasIndex("DoctorId");

                    b.HasIndex(new[] { "Patientld" }, "patientld");

                    b.ToTable("casestudy", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Doctorld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doctorld");

                    b.Property<Guid>("Userld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("userld")
                        .HasDefaultValueSql("(UUID())");

                    b.HasKey("Doctorld")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Userld" }, "userld");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ktv", b =>
                {
                    b.Property<int>("Ktvld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ktvld");

                    b.Property<string>("KtvName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ktvName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("RoleIndication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("roleIndication")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user")
                        .HasDefaultValueSql("(UUID())");

                    b.HasKey("Ktvld")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("ktv", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicalCdha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CaseStudyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateCreate")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Doctorld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doctorld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ImageLink")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imageLink")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ImageName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imageName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Ktvld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ktvld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<bool?>("NonDicom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nonDicom")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ObservationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("observationType")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PatientIdNavigationPatientld")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Patientld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("patientld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("TimeEstimate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("timeEstimate")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("PatientIdNavigationPatientld");

                    b.HasIndex(new[] { "Doctorld" }, "doctorld");

                    b.HasIndex(new[] { "Ktvld" }, "ktvld");

                    b.HasIndex(new[] { "Patientld" }, "patientld")
                        .HasDatabaseName("patientld1");

                    b.ToTable("medical_cdha", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicalIndication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CaseStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("CaseStudyId")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Doctorld")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Patientld")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Doctorld");

                    b.HasIndex("Patientld");

                    b.HasIndex(new[] { "CaseStudyId" }, "CaseStudyId");

                    b.ToTable("medical_indication", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CaseStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("c")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateCreate")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Doctorld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doctorld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Ktvld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ktvld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("ObservationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("observationType")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PatientIdNavigationPatientld")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Patientld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("patientld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("TestName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("testName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("TimeEstimate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("timeEstimate")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("CaseStudyId");

                    b.HasIndex("PatientIdNavigationPatientld");

                    b.HasIndex(new[] { "Doctorld" }, "doctorld")
                        .HasDatabaseName("doctorld1");

                    b.HasIndex(new[] { "Ktvld" }, "ktvld")
                        .HasDatabaseName("ktvld1");

                    b.HasIndex(new[] { "Patientld" }, "patientld")
                        .HasDatabaseName("patientld2");

                    b.ToTable("medical_test", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Nurse", b =>
                {
                    b.Property<int>("Nurseld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("nurseld");

                    b.Property<Guid>("Userld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("userld")
                        .HasDefaultValueSql("(UUID())");

                    b.HasKey("Nurseld")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Userld" }, "userld")
                        .HasDatabaseName("userld1");

                    b.ToTable("nurse", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Patientld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("patientld");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dob")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Doctorld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doctorld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("PatientName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patientName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("phone")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Roomld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("roomld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sex")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Patientld")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Doctorld" }, "doctorld")
                        .HasDatabaseName("doctorld2");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Reportld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("reportld");

                    b.Property<string>("Conclusion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("conclusion")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Diagnostic")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("diagnostic")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("DoctorName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doctorName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Doctorld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doctorld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Ktvld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ktvld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("PatientName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patientName")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("Patientld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("patientld")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("state")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Reportld")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Doctorld" }, "doctorld")
                        .HasDatabaseName("doctorld3");

                    b.HasIndex(new[] { "Patientld" }, "patientld")
                        .HasDatabaseName("patientld3");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Roleld");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Userld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(UUID())");

                    b.Property<string>("Fullname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullname")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int(11)");

                    b.Property<string>("user")
                        .HasColumnType("longtext");

                    b.HasKey("Userld")
                        .HasName("PRIMARY");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Casestudy", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "DoctorldNavigation")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Domain.Entities.Patient", "PatientldNavigation")
                        .WithMany("Casestudies")
                        .HasForeignKey("Patientld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("casestudy_ibfk_1");

                    b.Navigation("DoctorldNavigation");

                    b.Navigation("PatientldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserldNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("Userld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("doctor_ibfk_1");

                    b.Navigation("UserldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Ktv", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserldNavigation")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.MedicalCdha", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "DoctorldNavigation")
                        .WithMany("MedicalCdhas")
                        .HasForeignKey("Doctorld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_cdha_ibfk_2");

                    b.HasOne("Domain.Entities.Ktv", "KtvldNavigation")
                        .WithMany("MedicalCdhas")
                        .HasForeignKey("Ktvld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_cdha_ibfk_3");

                    b.HasOne("Domain.Entities.Patient", "PatientIdNavigation")
                        .WithMany("MedicalCdhas")
                        .HasForeignKey("PatientIdNavigationPatientld");

                    b.HasOne("Domain.Entities.Casestudy", "CaseStudyIdNavigation")
                        .WithMany("MedicalCdhas")
                        .HasForeignKey("Patientld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_cdha_ibfk_1");

                    b.Navigation("CaseStudyIdNavigation");

                    b.Navigation("DoctorldNavigation");

                    b.Navigation("KtvldNavigation");

                    b.Navigation("PatientIdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.MedicalIndication", b =>
                {
                    b.HasOne("Domain.Entities.Casestudy", "CaseStudyIdNavigation")
                        .WithMany("MedicalIndications")
                        .HasForeignKey("CaseStudyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_indication_ibfk_1");

                    b.HasOne("Domain.Entities.Doctor", null)
                        .WithMany("MedicalIndication")
                        .HasForeignKey("Doctorld");

                    b.HasOne("Domain.Entities.Patient", null)
                        .WithMany("MedicalIndications")
                        .HasForeignKey("Patientld");

                    b.Navigation("CaseStudyIdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTest", b =>
                {
                    b.HasOne("Domain.Entities.Casestudy", "CaseStudyIdNavigation")
                        .WithMany("MedicalTests")
                        .HasForeignKey("CaseStudyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_test_ibfk_1");

                    b.HasOne("Domain.Entities.Doctor", "DoctorldNavigation")
                        .WithMany("MedicalTests")
                        .HasForeignKey("Doctorld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_test_ibfk_2");

                    b.HasOne("Domain.Entities.Ktv", "KtvldNavigation")
                        .WithMany("MedicalTests")
                        .HasForeignKey("Ktvld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("medical_test_ibfk_3");

                    b.HasOne("Domain.Entities.Patient", "PatientIdNavigation")
                        .WithMany("MedicalTests")
                        .HasForeignKey("PatientIdNavigationPatientld");

                    b.Navigation("CaseStudyIdNavigation");

                    b.Navigation("DoctorldNavigation");

                    b.Navigation("KtvldNavigation");

                    b.Navigation("PatientIdNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Nurse", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserldNavigation")
                        .WithMany("Nurses")
                        .HasForeignKey("Userld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("nurse_ibfk_1");

                    b.Navigation("UserldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "DoctorldNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("Doctorld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("patient_ibfk_1");

                    b.Navigation("DoctorldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "DoctorldNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("Doctorld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("report_ibfk_2");

                    b.HasOne("Domain.Entities.Patient", "PatientldNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("Patientld")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("report_ibfk_1");

                    b.Navigation("DoctorldNavigation");

                    b.Navigation("PatientldNavigation");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Casestudy", b =>
                {
                    b.Navigation("MedicalCdhas");

                    b.Navigation("MedicalIndications");

                    b.Navigation("MedicalTests");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("MedicalCdhas");

                    b.Navigation("MedicalIndication");

                    b.Navigation("MedicalTests");

                    b.Navigation("Patients");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Ktv", b =>
                {
                    b.Navigation("MedicalCdhas");

                    b.Navigation("MedicalTests");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Casestudies");

                    b.Navigation("MedicalCdhas");

                    b.Navigation("MedicalIndications");

                    b.Navigation("MedicalTests");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");
                });
#pragma warning restore 612, 618
        }
    }
}
